Traceback (most recent call last):
  File "/Users/humphreyyang/anaconda3/envs/quantecon/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/Users/humphreyyang/anaconda3/envs/quantecon/lib/python3.9/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/Users/humphreyyang/anaconda3/envs/quantecon/lib/python3.9/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/Users/humphreyyang/anaconda3/envs/quantecon/lib/python3.9/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/Users/humphreyyang/anaconda3/envs/quantecon/lib/python3.9/asyncio/base_events.py", line 647, in run_until_complete
    return future.result()
  File "/Users/humphreyyang/anaconda3/envs/quantecon/lib/python3.9/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "/Users/humphreyyang/anaconda3/envs/quantecon/lib/python3.9/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/Users/humphreyyang/anaconda3/envs/quantecon/lib/python3.9/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
ch1_data = qbn_data.introduction()
export_figures = False

DG = ch1_data['aircraft_network']
pos = ch1_data['aircraft_network_pos']

centrality = nx.eigenvector_centrality(DG)
node_total_exports = qbn_io.node_total_exports(DG)
edge_weights = qbn_io.edge_weights(DG)

node_pos_dict = pos

node_sizes = qbn_io.normalise_weights(node_total_exports,10000)
edge_widths = qbn_io.normalise_weights(edge_weights,10)

node_colors = qbn_io.colorise_weights(list(centrality.values()),color_palette=cm.viridis)
node_to_color = dict(zip(DG.nodes,node_colors))
edge_colors = []
for src,_ in DG.edges:
    edge_colors.append(node_to_color[src])

fig, ax = plt.subplots(figsize=(10, 10))
ax.axis('off')

nx.draw_networkx_nodes(DG,
                       node_pos_dict,
                       node_color=node_colors,
                       node_size=node_sizes,
                       linewidths=2,
                       alpha=0.6,
                       ax=ax)

nx.draw_networkx_labels(DG,
                        node_pos_dict,
                        ax=ax)

nx.draw_networkx_edges(DG,
                       node_pos_dict,
                       edge_color=edge_colors,
                       width=edge_widths,
                       arrows=True,
                       arrowsize=20,
                       ax=ax,
                       arrowstyle='->',
                       node_size=node_sizes,
                       connectionstyle='arc3,rad=0.15')

plt.show()
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mKeyError[0m                                  Traceback (most recent call last)
Cell [0;32mIn[3], line 4[0m
[1;32m      1[0m ch1_data [38;5;241m=[39m qbn_data[38;5;241m.[39mintroduction()
[1;32m      2[0m export_figures [38;5;241m=[39m [38;5;28;01mFalse[39;00m
[0;32m----> 4[0m DG [38;5;241m=[39m [43mch1_data[49m[43m[[49m[38;5;124;43m'[39;49m[38;5;124;43maircraft_network[39;49m[38;5;124;43m'[39;49m[43m][49m
[1;32m      5[0m pos [38;5;241m=[39m ch1_data[[38;5;124m'[39m[38;5;124maircraft_network_pos[39m[38;5;124m'[39m]
[1;32m      7[0m centrality [38;5;241m=[39m nx[38;5;241m.[39meigenvector_centrality(DG)

[0;31mKeyError[0m: 'aircraft_network'
KeyError: 'aircraft_network'

